{"version":3,"sources":["webpack://prebid-example/./src/advert.ts","webpack://prebid-example/./src/advertFactory.ts","webpack://prebid-example/./src/advertObserver.ts","webpack://prebid-example/./src/advertService.ts","webpack://prebid-example/./src/comms.ts","webpack://prebid-example/./src/index.ts","webpack://prebid-example/webpack/bootstrap","webpack://prebid-example/webpack/startup"],"names":["unit","id","sizes","bids","refresh","position","closeBtn","refreshSettings","refreshCounter","close","adContainer","observer","parentNode","removeChild","adDiv","undefined","refreshTimeout","window","clearTimeout","refreshAdvert","apntag","autoRefresh","closeFunc","this","refreshFunc","btnClick","autoRefreshFunc","delay","repeat","AdvertObserver","renderToDom","containerId","container","document","getElementById","createElement","classList","add","style","display","body","prepend","appendChild","observe","anq","push","showTag","toAdUnit","code","mediaTypes","banner","map","size","width","height","toApnTag","tagId","targetId","Advert","fromData","element","Array","isArray","Error","toString","toSizeArray","toBidArray","toPosition","positon","toRefreshSettingsObject","result","forEach","length","bidder","params","placementId","indexOf","settings","AdvertFactory","advert","refreshButtonFunc","advertChanged","events","changeIsNotRefresh","addCloseButton","addRefreshButton","initiateAutoRefresh","MutationObserver","closeButtonId","refreshButtonId","childList","disconnect","closeButton","innerHTML","addEventListener","refreshButton","setTimeout","event","addedNodes","index","HTMLElement","reduce","check","current","AdvertService","global","requestBids","adUnits","pbjs","que","addAdUnits","bidsBackHandler","initAdServer","timeout","requestSent","setTargetingForAst","loadTags","setPageOptions","adverts","setPageOpts","member","tag","defineTag","fetchAdvertsFromAPI","fetch","response","ok","status","statusText","json","data","factory","console","log","error","Comms","service","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call"],"mappings":"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","file":"advert.js","sourcesContent":["import * as apntag from \"./appNexus\";\r\nimport { AdvertObserver } from \"./advertObserver\";\r\n\r\n/**\r\n * Represents a single advert. Contains all the information about the advert,\r\n * and also all the DOM elements and observers associated with the advert.\r\n *\r\n * @export\r\n * @class Advert\r\n */\r\nexport class Advert {\r\n  /**\r\n   * Creates an instance of the advert from the given data, and initialises an observer.\r\n   * @param unit The unit value to use for Apn tags.\r\n   * @param id The ID of the div containing this advert.\r\n   * @param sizes An array of allowed advert sizes.\r\n   * @param bids An array of bidders.\r\n   * @param refresh Whether or not to refresh the advert (using the refreshSettings data). Defaults to false.\r\n   * @param position The position of the advert on the page. Valid values are \"left\", \"right\" and the default \"bottom\".\r\n   * @param closeBtn Whether or not to include a close button with the advert. Defaults to false.\r\n   * @param refreshSettings The settings to use when determining how the advert should be refreshed.\r\n   */\r\n  constructor(\r\n    public unit: string,\r\n    public id: string,\r\n    public sizes: IAdvertSize[],\r\n    public bids: IAdvertBidder[],\r\n    public refresh: boolean = false,\r\n    public position: ValidPosition = \"bottom\",\r\n    public closeBtn: boolean = false,\r\n    public refreshSettings?: IAdvertRefreshSettings\r\n  ) {\r\n    let closeFunc = this.closeBtn ? this.close : undefined;\r\n    let refreshFunc =\r\n      this.refresh && this.refreshSettings?.btnClick == \"enabled\"\r\n        ? this.refreshAdvert\r\n        : undefined;\r\n    let autoRefreshFunc =\r\n      this.refresh &&\r\n      this.refreshSettings?.delay &&\r\n      this.refreshSettings?.repeat\r\n        ? this.autoRefresh\r\n        : undefined;\r\n    this.observer = new AdvertObserver(\r\n      this,\r\n      closeFunc,\r\n      refreshFunc,\r\n      autoRefreshFunc\r\n    );\r\n  }\r\n\r\n  public adDiv?: HTMLDivElement;\r\n  public adContainer?: HTMLDivElement;\r\n  public refreshTimeout?: number;\r\n  public refreshCounter: number = 0;\r\n\r\n  private observer: AdvertObserver;\r\n\r\n  /**\r\n   * Renders the DOM elements for this advert.\r\n   * There are two elements for the actual advert - the container that\r\n   * centers it and the div itself that contains the advert.\r\n   * Also initiates the observer, and requests that the AST service show the tag\r\n   */\r\n  public renderToDom(): void {\r\n    let containerId = `container-for-${this.id}`;\r\n    let container = document.getElementById(containerId) as HTMLDivElement;\r\n    if (!container) {\r\n      container = document.createElement(\"div\");\r\n      container.classList.add(\"advert_container\");\r\n      container.classList.add(`advert_container_${this.position}`);\r\n      container.style.display = \"none\";\r\n      document.body.prepend(container);\r\n    }\r\n    this.adContainer = container;\r\n    this.adDiv = document.createElement(\"div\");\r\n    this.adDiv.id = this.id;\r\n    this.adDiv.classList.add(\"advert_display\");\r\n    this.adDiv.classList.add(`advert_display_${this.position}`);\r\n    this.adContainer.appendChild(this.adDiv);\r\n    this.observer.observe();\r\n\r\n    window.apntag.anq.push(() => {\r\n      window.apntag.showTag(this.id);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Converts this advert into an adUnit object, used for the PreBid service\r\n   *\r\n   * @return The ad unit\r\n   */\r\n  public toAdUnit(): IAdUnit {\r\n    return {\r\n      code: this.id,\r\n      mediaTypes: {\r\n        banner: {\r\n          sizes: this.sizes.map((size) => [size.width, size.height]),\r\n        },\r\n      },\r\n      bids: this.bids,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Converts this advert into an APN tag, used for the AST service\r\n   *\r\n   * @return The APN tag\r\n   */\r\n  public toApnTag(): IApnTag {\r\n    return {\r\n      tagId: this.unit,\r\n      sizes: this.sizes.map((size) => [size.width, size.height]),\r\n      targetId: this.id,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Closes this advert\r\n   * All DOM elements are removed from the DOM, and references are removed\r\n   * Timers are cancelled\r\n   */\r\n  public close = (): void => {\r\n    if (!this.adContainer) return;\r\n    this.observer.close();\r\n    this.adContainer.parentNode?.removeChild(this.adContainer);\r\n    this.adDiv = undefined;\r\n    this.adContainer = undefined;\r\n    if (this.refreshTimeout != undefined) {\r\n      window.clearTimeout(this.refreshTimeout);\r\n      this.refreshTimeout = undefined;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Refreshes this advert.\r\n   * Calls the AST service for another advert.\r\n   */\r\n  public refreshAdvert = (): void => {\r\n    if (!this.adContainer) return;\r\n    window.apntag.refresh([this.id]);\r\n  };\r\n\r\n  /**\r\n   * Initiate another automatic refresh.\r\n   * This will increment the refresh counter, then refresh the advert.\r\n   * This method will not initiate the next refresh timer\r\n   */\r\n  private autoRefresh = (): void => {\r\n    this.refreshCounter++;\r\n    this.refreshTimeout = undefined;\r\n    this.refreshAdvert();\r\n  };\r\n}\r\n\r\nexport type ValidPosition = \"left\" | \"right\" | \"bottom\";\r\n\r\nexport interface IAdvertSize {\r\n  width: number;\r\n  height: number;\r\n}\r\n\r\nexport interface IAdvertRefreshSettings {\r\n  delay: number;\r\n  repeat: number;\r\n  btnClick: \"enabled\" | \"disabled\";\r\n}\r\n\r\nexport interface IAdvertBidder {\r\n  bidder: string;\r\n  params: {\r\n    placementId: number;\r\n  };\r\n}\r\n\r\nexport interface IAdUnit {\r\n  code: string;\r\n  mediaTypes: {\r\n    banner: {\r\n      sizes: number[][];\r\n    };\r\n  };\r\n  bids: IAdvertBidder[];\r\n}\r\n\r\nexport interface IApnTag {\r\n  tagId: string;\r\n  sizes: number[][];\r\n  targetId: string;\r\n}\r\n","import {\r\n  Advert,\r\n  ValidPosition,\r\n  IAdvertSize,\r\n  IAdvertRefreshSettings,\r\n  IAdvertBidder,\r\n} from \"./advert\";\r\n\r\n/**\r\n * Generates an advert from a data object provided.\r\n * This is primarily used in the Comms class to create an advert from the data fetched from the API.\r\n *\r\n * @export\r\n * @class AdvertFactory\r\n */\r\nexport class AdvertFactory {\r\n  /**\r\n   * Construct a new Advert from a data object\r\n   * We know the object has come from an external source, so we need to be very careful about constructing the Advert,\r\n   * so we can trust the structure inside our system. Invalid data will throw an error if we cannot use a reasonable default.\r\n   * The method is created as a function property to ensure binding with the class, to allow it to be easily used in a map function.\r\n   *\r\n   * @param element The data object to convert into an Advert\r\n   * @return The generated advert.\r\n   */\r\n  public fromData = (element: any): Advert => {\r\n    if (\r\n      !element ||\r\n      !element.unit ||\r\n      !element.id ||\r\n      !element.sizes ||\r\n      !Array.isArray(element.sizes) ||\r\n      !element.bids ||\r\n      !Array.isArray(element.bids)\r\n    )\r\n      throw new Error(\"Invalid advert data\");\r\n    return new Advert(\r\n      element.unit.toString(),\r\n      element.id.toString(),\r\n      this.toSizeArray(element.sizes),\r\n      this.toBidArray(element.bids),\r\n      !!element.refresh,\r\n      this.toPosition(element.position || element.positon), // Note - the API spells this incorrectly.\r\n      !!element.closeBtn,\r\n      this.toRefreshSettingsObject(element.refreshSettings)\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Converts an array of size arrays (arrays with two number members) into an array of size objects\r\n   *\r\n   * @private\r\n   * @param sizes an array of size arrays\r\n   * @return an array of size objects\r\n   */\r\n  private toSizeArray(sizes: any[]): IAdvertSize[] {\r\n    var result: IAdvertSize[] = [];\r\n    sizes.forEach((element) => {\r\n      if (!Array.isArray(element) || element.length != 2)\r\n        throw new Error(\"Invalid advert size data\");\r\n      var size: IAdvertSize = {\r\n        width: element[0],\r\n        height: element[1],\r\n      };\r\n      result.push(size);\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Creates a set of bidder objects, if the input data is well formed. Otherwise, throws an error.\r\n   *\r\n   * @private\r\n   * @param bids the bidder data\r\n   * @return an array of bidder objects\r\n   */\r\n  private toBidArray(bids: any[]): IAdvertBidder[] {\r\n    var result: IAdvertBidder[] = [];\r\n    bids.forEach((element) => {\r\n      if (!element.bidder || !element.params?.placementId)\r\n        throw new Error(\"Invalid advert bidder data\");\r\n      var bidder: IAdvertBidder = {\r\n        bidder: element.bidder,\r\n        params: {\r\n          placementId: element.params.placementId,\r\n        },\r\n      };\r\n      result.push(bidder);\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Returns the provided position if it is a valid value, or a default\r\n   *\r\n   * @private\r\n   * @param position the position to check\r\n   * @return the position if valid, or a default to use\r\n   */\r\n  private toPosition(position: string): ValidPosition {\r\n    if (~[\"left\", \"right\", \"bottom\"].indexOf(position)) {\r\n      return position as ValidPosition;\r\n    }\r\n\r\n    return \"bottom\";\r\n  }\r\n\r\n  /**\r\n   * Generates a unified refresh settings object from the data. This could represent\r\n   * either a refresh button or the delay and repeat details for an automated refresh.\r\n   *\r\n   * @private\r\n   * @param settings the source data\r\n   * @return the constructed refresh settings, or undefined if no settings could (or should) be generated\r\n   */\r\n  private toRefreshSettingsObject(\r\n    settings: any\r\n  ): IAdvertRefreshSettings | undefined {\r\n    if (!settings) return undefined;\r\n    if (settings.delay || settings.repeat) {\r\n      return {\r\n        delay: settings.delay || 0,\r\n        repeat: settings.repeat || 0,\r\n        btnClick: \"disabled\",\r\n      };\r\n    }\r\n    if (settings.btnClick && settings.btnClick == \"enabled\")\r\n      return { delay: 0, repeat: 0, btnClick: \"enabled\" };\r\n    return undefined;\r\n  }\r\n}\r\n","import { Advert } from \"./advert\";\r\n\r\n/**\r\n * Watches the associated advert, adds close and refresh buttons, and initiates auto refreshes, as appropriate.\r\n *\r\n * Some methods in this class are made public to enable testing,\r\n * but would otherwise be private. These are marked as such in their comments.\r\n *\r\n * @export\r\n * @class AdvertObserver\r\n */\r\nexport class AdvertObserver {\r\n  private observer: MutationObserver;\r\n  private closeButtonId: string;\r\n  private refreshButtonId: string;\r\n\r\n  /**\r\n   * Creates an instance of AdvertObserver.\r\n   * @param advert The advert to be observed.\r\n   * @param closeFunc If supplied, the function to call when the close button is clicked. If not supplied, no close button will be added.\r\n   * @param refreshButtonFunc If supplied, the function to call when the refresh button is clicked. If not supplied, no refresh button will be added.\r\n   * @param autoRefreshFunc If supplied, the function to call when the automated refresh ticks over. If not supplied, no automatic refresh will be initiated.\r\n   */\r\n  constructor(\r\n    private advert: Advert,\r\n    private closeFunc?: () => void,\r\n    private refreshButtonFunc?: () => void,\r\n    private autoRefreshFunc?: () => void\r\n  ) {\r\n    this.observer = new MutationObserver(this.advertChanged);\r\n    this.closeButtonId = `advert_close_button_${this.advert.id}`;\r\n    this.refreshButtonId = `advert_refresh_button_${this.advert.id}`;\r\n  }\r\n\r\n  /**\r\n   * Initiate the observation. This allows the class to be constructed without acting, if necessary\r\n   */\r\n  public observe(): void {\r\n    if (!this?.advert?.adDiv) return;\r\n    this.observer.observe(this.advert.adDiv, { childList: true });\r\n  }\r\n\r\n  /**\r\n   * Disconnects the internal observer, to release references when an advert is closed.\r\n   */\r\n  public close(): void {\r\n    this.observer.disconnect();\r\n  }\r\n\r\n  /**\r\n   * The event handler for the mutation observer. Adds or re-adds the close button or refresh button,\r\n   * or re-initialises the auto refresh, whenever the contents of the advert div are updated.\r\n   *\r\n   * @param events The array of mutation events returned from the internal mutation observer\r\n   */\r\n  private advertChanged = (events: MutationRecord[]): void => {\r\n    if (!this.advert.adDiv || this.changeIsNotRefresh(events)) return;\r\n\r\n    if (this.closeFunc) {\r\n      this.addCloseButton();\r\n    }\r\n\r\n    if (this.refreshButtonFunc) {\r\n      this.addRefreshButton();\r\n    }\r\n\r\n    if (this.autoRefreshFunc && this.advert.refreshSettings) {\r\n      this.initiateAutoRefresh();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Adds a close button if appropriate, and if one does not already exist\r\n   *\r\n   * @private\r\n   */\r\n  public addCloseButton() {\r\n    let closeButton = document.getElementById(\r\n      `advert_close_button_${this.advert.id}`\r\n    );\r\n    if (!closeButton) {\r\n      closeButton = document.createElement(\"span\");\r\n      closeButton.id = this.closeButtonId;\r\n      closeButton.classList.add(\"advert_close_button\");\r\n      closeButton.innerHTML = \"X\";\r\n      closeButton.addEventListener(\"click\", this.closeFunc!);\r\n      this.advert.adDiv!.prepend(closeButton);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a refresh button if appropriate, and if one does not already exist\r\n   *\r\n   * @private\r\n   */\r\n  public addRefreshButton() {\r\n    let refreshButton = document.getElementById(\r\n      `advert_refresh_button_${this.advert.id}`\r\n    );\r\n    if (!refreshButton) {\r\n      refreshButton = document.createElement(\"span\");\r\n      refreshButton.id = this.refreshButtonId;\r\n      refreshButton.classList.add(\"advert_refresh_button\");\r\n      refreshButton.innerHTML = \"Refresh AD\";\r\n      refreshButton.addEventListener(\"click\", this.refreshButtonFunc!);\r\n      this.advert.adDiv!.prepend(refreshButton);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initiates an automatic timer to refresh the advert, if appropriate and if required settings exist.\r\n   * Clears any existing timers.\r\n   * This method assumed the existence of certain variables without checking on them. These checks are made in the calling method.\r\n   *\r\n   * @private\r\n   */\r\n  public initiateAutoRefresh() {\r\n    if (this.advert.refreshTimeout != undefined) {\r\n      window.clearTimeout(this.advert.refreshTimeout);\r\n      this.advert.refreshTimeout = undefined;\r\n    }\r\n    if (this.advert.refreshCounter < this.advert.refreshSettings!.repeat) {\r\n      this.advert.refreshTimeout = window.setTimeout(\r\n        this.autoRefreshFunc!,\r\n        this.advert.refreshSettings!.delay\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks the events that triggered this mutation. We only want to act when:\r\n   * 1: a new element is added to our div. When elements are taken away, we don't care.\r\n   *    We don't need to remove our buttons when elements are removed, because the removal\r\n   *    generally clears all the contents of the div.\r\n   * 2: the new elements being added are not all our own elements. When we add the close or\r\n   *    refresh buttons, that triggers the mutation observer again. We want to ignore those actions.\r\n   *\r\n   * @param events The mutation events that triggered this observed mutation\r\n   * @return boolean Whether or not this change represents a legitimate refresh we should act upon.\r\n   *         False means it should be acted upon, while True means it should not.\r\n   * @private\r\n   */\r\n  public changeIsNotRefresh(events: MutationRecord[]): boolean {\r\n    return events\r\n      .map((event) => {\r\n        // We are only interested in changes that add new nodes\r\n        if (!event.addedNodes.length) {\r\n          return true;\r\n        }\r\n\r\n        // Look through the list of added nodes for any that aren't the two we control\r\n        for (let index = 0; index < event.addedNodes.length; index++) {\r\n          const element = event.addedNodes[index];\r\n          if (\r\n            !(element instanceof HTMLElement) ||\r\n            !~[this.closeButtonId, this.refreshButtonId].indexOf(\r\n              (element as HTMLElement).id\r\n            )\r\n          ) {\r\n            return false;\r\n          }\r\n        }\r\n\r\n        // We didn't find any that we don't control, so this event is all us - this is not a refresh\r\n        return true;\r\n      })\r\n      .reduce((check, current) => check && current, true);\r\n  }\r\n}\r\n","import * as pbjs from \"./prebid\";\r\nimport * as apntag from \"./appNexus\";\r\nimport { IAdUnit, Advert } from \"./advert\";\r\n\r\nconst PrebidTimeout = 1000;\r\n\r\n/**\r\n * This service prepares the Prebid and AppNexus AST systems and loads the initial adverts from those systems\r\n *\r\n * @export\r\n * @class AdvertService\r\n */\r\nexport class AdvertService {\r\n  constructor(private global: any) {}\r\n\r\n  /**\r\n   * Request bids from the PreBid service based on the advert details provided\r\n   * The method will add the request to the PreBid queue to wait for that service to be ready\r\n   *\r\n   * @param adUnits An array of IAdUnit objects generated from the adverts\r\n   */\r\n  public requestBids = (adUnits: IAdUnit[]) => {\r\n    this.global.pbjs.que.push(() => {\r\n      this.global.pbjs.addAdUnits(adUnits);\r\n      this.global.pbjs.requestBids({\r\n        bidsBackHandler: this.initAdServer,\r\n        timeout: PrebidTimeout,\r\n      });\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Once the requested bids have been returned, this method is called.\r\n   * It will use both the PreBid and aPN queues to ensure both services have been loaded\r\n   * It then links the Prebid service to the AST, and loads tags in the AST\r\n   */\r\n  public initAdServer = () => {\r\n    if (this.global.pbjs.requestSent) {\r\n      return;\r\n    }\r\n    this.global.pbjs.requestSent = true;\r\n    this.global.pbjs.que.push(() => {\r\n      this.global.apntag.anq.push(() => {\r\n        this.global.pbjs.setTargetingForAst();\r\n        this.global.apntag.loadTags();\r\n      });\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Sets up page options for the AST service.\r\n   * It uses the AST queue to ensure that service has been loaded\r\n   * It sets up page options for the AST, and defines each advert as a tag\r\n   *\r\n   * @param adverts The adverts to use to define tags\r\n   */\r\n  public setPageOptions = (adverts: Advert[]) => {\r\n    this.global.apntag.anq.push(() => {\r\n      this.global.apntag.setPageOpts({\r\n        member: 1543,\r\n      });\r\n      adverts\r\n        .map((advert) => advert.toApnTag())\r\n        .forEach((tag) => this.global.apntag.defineTag(tag));\r\n    });\r\n  };\r\n}\r\n","import { Advert } from \"./advert\";\r\nimport { AdvertFactory } from \"./advertFactory\";\r\n\r\nconst APIURL = \"https://60bcfd7fb8ab3700175a005b.mockapi.io/eg/ads\";\r\n\r\n/**\r\n * The Comms class is used exclusively for communicating to APIs\r\n * In this case, there is just one method representing one call\r\n *\r\n * @export\r\n * @class Comms\r\n */\r\nexport class Comms {\r\n  /**\r\n   * Representing a call to the Adverts API provided for this project.\r\n   * If the call is successful, this method will return an array of Advert objects\r\n   *\r\n   * @return An array of advert objects\r\n   */\r\n  public async fetchAdvertsFromAPI(): Promise<Advert[]> {\r\n    try {\r\n      let response = await fetch(APIURL);\r\n      if (!response.ok) {\r\n        throw new Error(\r\n          `Response from the API failed with ${response.status} ${response.statusText}`\r\n        );\r\n      }\r\n\r\n      let data = await response.json();\r\n      if (!Array.isArray(data)) {\r\n        throw new Error(\"Data is not an array\");\r\n      }\r\n\r\n      var factory = new AdvertFactory();\r\n      var result: Advert[] = (data as Array<any>).map(factory.fromData);\r\n      return result;\r\n    } catch (err) {\r\n      console.log(\r\n        \"Failed to download data from the API. Errors will be swallowed so as not to interupt users' experience\"\r\n      );\r\n      console.error(err);\r\n    }\r\n\r\n    return [];\r\n  }\r\n}\r\n","import { Comms } from \"./comms\";\r\nimport * as pbjs from \"./prebid\";\r\nimport * as apntag from \"./appNexus\";\r\nimport { AdvertService } from \"./advertService\";\r\n\r\n/**\r\n * Entry point for this application.\r\n * This section contains very little code, and mainly just orchestrates the initial load.\r\n */\r\n(async function (global) {\r\n  let comms = new Comms();\r\n  let adverts = await comms.fetchAdvertsFromAPI();\r\n  adverts.forEach((advert) => advert.renderToDom());\r\n  let adUnits = adverts.map((advert) => advert.toAdUnit());\r\n  let service = new AdvertService(global);\r\n\r\n  let pbjs = global.pbjs || {};\r\n  pbjs.que = pbjs.que || [];\r\n\r\n  let apntag = global.apntag || {};\r\n  apntag.anq = apntag.anq || [];\r\n\r\n  service.requestBids(adUnits);\r\n  service.setPageOptions(adverts);\r\n})(window);\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(607);\n"],"sourceRoot":""}